- include_role: {name: corpusops.roles/docker_compose_service}
  vars:
    _docker_compose_service:
      working_directory: "{{cops_seafile_compose_dir}}"
      files: "{{cops_seafile_compose_files}}"
      project: "{{cops_seafile_composename}}"
      restart: "on-failure"
      pull: false
  tags: [service]
# ensure manually handled services are booted
# to handle sidekar volumes refresh accuratly
- shell: |
    set -ex
    cd "{{cops_seafile_compose_dir}}"
    {% for i in cops_seafile_restarted_services.split() %}
    ret=
    for i in $(seq 30);do
      if ( {{cops_seafile_dc}} ps --services \
           --filter status=running | egrep -q "^{{i}}$");then
        {{cops_seafile_dc}} up -d --no-deps --remove-orphans --force-recreate {{i}}
        ret=$?
      else
        {{cops_seafile_dc}} up -d --no-deps --remove-orphans {{i}}
      fi
      if [ "x$ret" = "x0" ];then break;fi
      sleep 1
    done
    if [ "x$ret" != "x0" ];then echo "{{i}}: failed restart";exit 1;fi
    {% endfor %}
- shell: |
    set -ex
    cd "{{cops_seafile_compose_dir}}"
    {% for i in cops_seafile_restarted_services.split()|reverse %}
    {{cops_seafile_dc}} ps --services --filter status=running | egrep -q "^{{i}}$"
    {% endfor %}
  retries: 60
  delay: 1
  register: restarted_docker_services
  until: "restarted_docker_services.rc == 0"
## as we use a named volume for nginx sidekar container, also
## purge the obsolete volumes leftover in-between
- shell: |
    set -ex
    cd "{{cops_seafile_compose_dir}}"
    if [[ -n "{{cops_seafile_docker_tag}}" ]];then
    {% for purge_volume in cops_seafile_purge_volumes %}
    for v in $(docker volume ls |awk '{print $2 }'|egrep "^{{cops_seafile_composename}}-{{purge_volume}}-"|grep -v {{cops_seafile_docker_tag}});do
      if ( docker volume inspect $v >/dev/null 2>&1; );then
        if ! ( docker volume rm -f $v; );then
          docker volume inspect $v;exit 1;
        fi
        echo "purged volume $v">&2
      fi
    done
    {% endfor %}
    fi
  # let time to docker to clean volumes
  args: {executable: /bin/bash}
  retries: 60
  delay: 1
  register: purge_volumes
  until: "purge_volumes.rc == 0"
  when:
  - "cops_seafile_docker_tag|copsf_asbool"
  - "cops_seafile_purge_volumes|copsf_asbool"
  changed_when: "'purged volume' in purge_volumes.stderr" 
