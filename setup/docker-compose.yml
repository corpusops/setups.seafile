version: '3.7'
x-images:
  env: &env
    env_file: [.env, docker.env]
    environment: {"COMPOSE_PROJECT_NAME": "$COMPOSE_PROJECT_NAME"}
x-onlyoffice-base: &onlyofficebase
  <<: [ *env ]
x-onlyoffice: &onlyoffice
  <<: [ *onlyofficebase ]
  image: "onlyoffice/documentserver:latest"
  stdin_open: true
  volumes:
     - onlyoffice-conf:/etc/onlyoffice
     - onlyoffice-data:/var/www/onlyoffice/Data
     - onlyoffice-logs:/var/log/onlyoffice
     - onlyoffice-lib:/var/lib/onlyoffice
     - onlyoffice-cache:/var/lib/onlyoffice/documentserver/App_Data/cache/files
     - onlyoffice-samples:/var/www/onlyoffice/documentserver-example/public/files
     - onlyoffice-fonts:/usr/share/fonts
services:
  db:
    <<: [ *env ]
    image: "{{cops_seafile_mysql_image}}"
    container_name: seafile-mysql
    volumes:
    - seafile-db:/var/lib/mysql
  setup-services:
    <<: [ *env ]
    image: "{{cops_seafile_mysql_image}}"
    depends_on: [db, memcached]
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      MYSQL_STARTUP_TIMEOUT=$${MYSQL_STARTUP_TIMEOUT:-45s}
      flag=/started_$$(echo $$MYSQL_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to mysql: $$MYSQL_DB & wait for db init" >&2 \
      && ( while true;do if ( echo "select 1" | mysql );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${MYSQL_STARTUP_TIMEOUT} \
      && : create all needed databases \
      && for i in $$SEAFILE_DB $$SEAHUB_DB $$CCNET_DB;do \
        if ! ( echo "select 1" | mysql $$i );then \
          echo "Creating db $$i"; \
          mysql -e "CREATE DATABASE $$i"; \
        fi; \
      done \
      && set +x \
      && mysql -e \
          "GRANT ALL PRIVILEGES ON $$SEAFILE_DB.* \
              TO '$$SEAFILE_USER'@'%' \
              IDENTIFIED BY '$$MYSQL_PASSWORD';FLUSH PRIVILEGES;" \
      && mysql -e \
          "GRANT ALL PRIVILEGES ON $$SEAHUB_DB.* \
              TO '$$SEAHUB_USER'@'%' \
              IDENTIFIED BY '$$MYSQL_PASSWORD';FLUSH PRIVILEGES;" \
      && mysql -e \
          "GRANT ALL PRIVILEGES ON $CCNET_DB.* \
              TO '$$CCNET_USER'@'%' \
              IDENTIFIED BY '$$MYSQL_PASSWORD';FLUSH PRIVILEGES;" \
      && set -x \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
  memcached:
    image: "{{cops_seafile_memcached_image}}"
    container_name: seafile-memcached
    entrypoint: memcached -m 256
  seafile:
    <<: [ *env ]
    image: "{{cops_seafile_image}}"
    command:
    - /bin/bash
    - '-exc'
    - >-
      : \
      && MYSQL_STARTUP_TIMEOUT=$${MYSQL_STARTUP_TIMEOUT:-45s}
      && dockerize -wait http://setup-services -timeout $${MYSQL_STARTUP_TIMEOUT}
      && while read f;do
      echo "Configuring $$f" >&2
      && frep $$f:/shared/seafile/conf/$$(basename $$f .frep) --overwrite;done < <(
      find /shared/seafile/conftemplates/ -name *frep)
      && /sbin/my_init -- /scripts/start.py
    volumes:
    - seafile-data:/shared
    - ./conf:/shared/seafile/conftemplates
    depends_on: [setup-services]
  traefik:
    <<: [ *env ]
    image: corpusops/traefik:alpine
    entrypoint:
    - /bin/sh
    - "-exc"
    - |-
      frep /staticconf/traefik.toml:/traefik.toml --overwrite
      traefik \
       --sendanonymoususage=false --defaultentrypoints=http \
       --accesslog --accesslog.bufferingsize=10 --loglevel=info \
       --rest --api --web --web.metrics -c /traefik.toml
    volumes:
    - ./traefik:/staticconf
    ports:
    - "${SEAFILE_HTTP_PORT:-80}:80"
    - "${SEAFILE_HTTPS_PORT:-443}:443"

#
# onlyoffice
#
  onlyoffice-documentserver-data:
    <<: [ *onlyoffice ]
    container_name: onlyoffice-documentserver-data
    image: onlyoffice/documentserver:latest
    environment:
      - ONLYOFFICE_DATA_CONTAINER=true
      - POSTGRESQL_SERVER_HOST=onlyoffice-postgresql
      - POSTGRESQL_SERVER_PORT=5432
      - POSTGRESQL_SERVER_DB_NAME=onlyoffice
      - POSTGRESQL_SERVER_USER=onlyoffice
      - AMQP_SERVER_URL=amqp://guest:guest@onlyoffice-rabbitmq
      - REDIS_SERVER_HOST=onlyoffice-redis
      - REDIS_SERVER_PORT=6379

  onlyoffice-documentserver:
    <<: [ *onlyoffice ]
    environment:
      - ONLYOFFICE_DATA_CONTAINER_HOST=onlyoffice-documentserver-data
    expose:
      - '80'
    depends_on:
    - onlyoffice-documentserver-data
    - onlyoffice-postgresql
    - onlyoffice-redis
    - onlyoffice-rabbitmq

  onlyoffice-redis:
    <<: [ *onlyofficebase ]
    container_name: onlyoffice-redis
    image: corpusops/redis:latest
    expose:
      - '6379'

  onlyoffice-rabbitmq:
    <<: [ *onlyofficebase ]
    container_name: onlyoffice-rabbitmq
    image: corpusops/rabbitmq:3.5
    expose:
      - '5672'

  onlyoffice-postgresql:
    <<: [ *onlyofficebase ]
    container_name: onlyoffice-postgresql
    image: corpusops/postgres:12
    environment:
      - POSTGRES_DB=onlyoffice
      - POSTGRES_USER=onlyoffice
    expose:
      - '5432'
    volumes:
      - onlyoffice-pgsql:/var/lib/postgresql

volumes:
  seafile-db: {name: "${COMPOSE_PROJECT_NAME}-seafile-db", external: false}
  seafile-data: {name: "${COMPOSE_PROJECT_NAME}-seafile-data", external: false}
  # onlyoffice
  onlyoffice-pgsql:
  onlyoffice-data:
  onlyoffice-logs:
  onlyoffice-cache:
  onlyoffice-conf:
  onlyoffice-fonts:
  onlyoffice-samples:
  onlyoffice-lib:
